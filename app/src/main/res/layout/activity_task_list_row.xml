<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:android="http://schemas.android.com/apk/res/android">
    <data>
        <import type="com.fireflylearning.tasksummary.model.Task"/>
        <import type="com.fireflylearning.tasksummary.tasklist.presenters.TaskListPresenter"/>
        <import type="com.fireflylearning.tasksummary.utils.TaskUtils"/>
        <import type="com.fireflylearning.tasksummary.utils.resources.ResourcesManager"/>
        <import type="com.fireflylearning.tasksummary.R"/>
        <variable
            name="task"
            type="Task"/>
        <variable
            name="presenter"
            type="TaskListPresenter"/>
        <variable
            name="taskUtils"
            type="TaskUtils"/>
        <variable
            name="resources"
            type="ResourcesManager"/>
    </data>

    <android.support.constraint.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:clickable="true"
        android:focusable="true"
        android:paddingTop="@dimen/vertical_margin"
        android:paddingBottom="@dimen/vertical_margin"
        android:foreground="?selectableItemBackground"
        android:onClick="@{()->presenter.taskClicked(task)}"
        >

        <TextView
            android:id="@+id/title"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:ellipsize="end"
            android:maxLines="2"
            tools:text="[Task Title]"
            android:textColor="@{(task.archived != null &amp;&amp; task.archived == true)? resources.getColor(R.color.colorFinished) : resources.getColor(R.color.colorNoFinished)}"
            android:text="@{task.title}"
            android:textSize="18sp"
            android:textStyle="bold"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintLeft_toLeftOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintRight_toRightOf="parent"
            android:layout_marginStart="@dimen/horizontal_margin"
            android:layout_marginLeft="@dimen/horizontal_margin"
            android:layout_marginEnd="@dimen/horizontal_margin"
            android:layout_marginRight="@dimen/horizontal_margin"/>


        <TextView
            android:id="@+id/date_set"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            tools:text="[Set Date/Time]"
            android:textColor="@{(task.archived != null &amp;&amp; task.archived == true)? resources.getColor(R.color.colorFinished) : resources.getColor(R.color.colorNoFinished)}"
            android:text="@{resources.getString(R.string.set) + ` ` + taskUtils.getDateSet(task)}"
            app:layout_constraintTop_toBottomOf="@id/title"
            app:layout_constraintStart_toStartOf="parent"
            android:layout_marginTop="@dimen/text_margin"
            android:layout_marginStart="@dimen/horizontal_margin"
            android:layout_marginEnd="@dimen/horizontal_margin"
            android:layout_marginRight="@dimen/horizontal_margin"
            android:layout_marginLeft="@dimen/horizontal_margin"
            android:textSize="14sp" />

        <TextView
            android:id="@+id/date_due"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            tools:text="[Due Date/Time]"
            android:textColor="@{(task.archived != null &amp;&amp; task.archived == true)? resources.getColor(R.color.colorFinished) : resources.getColor(R.color.colorNoFinished)}"
            android:text="@{task.due != null? resources.getString(R.string.due) + ` ` + taskUtils.getDateDue(task) : resources.getString(R.string.no_due)}"
            app:layout_constraintTop_toBottomOf="@id/date_set"
            app:layout_constraintStart_toStartOf="parent"
            android:layout_marginTop="@dimen/text_margin"
            android:layout_marginStart="@dimen/horizontal_margin"
            android:layout_marginEnd="@dimen/horizontal_margin"
            android:layout_marginRight="@dimen/horizontal_margin"
            android:layout_marginLeft="@dimen/horizontal_margin"
            android:textSize="14sp" />

        <TextView
            android:id="@+id/flags"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:textColor="@{(task.archived != null &amp;&amp; task.archived == true)? resources.getColor(R.color.colorFinished) : resources.getColor(R.color.colorNoFinished)}"
            android:layout_marginEnd="@dimen/horizontal_margin"
            android:layout_marginLeft="@dimen/horizontal_margin"
            android:layout_marginRight="@dimen/horizontal_margin"
            android:layout_marginStart="@dimen/horizontal_margin"
            android:text="@{taskUtils.getFlagsFromTask(task)}"
            android:textStyle="italic"
            app:layout_constraintBaseline_toBaselineOf="@id/date_set"
            app:layout_constraintHorizontal_bias="1.0"
            app:layout_constraintEnd_toEndOf="parent"
            android:gravity="end"
            app:layout_constraintRight_toRightOf="parent"
            app:layout_constraintLeft_toRightOf="@id/date_set"
            app:layout_constraintStart_toEndOf="@id/date_set"
            tools:text="[Task Flags]" />


    </android.support.constraint.ConstraintLayout>
</layout>
